"use client"

import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useState, useEffect } from "react"
import { fetchLiveFancyBets } from "@/lib/api"
import type { FancyBet } from "@/lib/types"
import { useRouter } from "next/navigation"

interface BetSelection {
  name: string;
  type: 'yes' | 'no';
  odds: string;
}

export default function CricketLivePage() {
  const [selectedOdds, setSelectedOdds] = useState("75")
  const [selectedStake, setSelectedStake] = useState("0")
  const [selectedBet, setSelectedBet] = useState<BetSelection | null>(null)
  const [fancyBets, setFancyBets] = useState<FancyBet[]>([])
  const [loading, setLoading] = useState(true)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const router = useRouter()

  const MIN_STAKE = 100
  const MAX_STAKE = 150000

  const predefinedStakes = [
    [200000, 5000000, 1000, 100],
    [5000, 100, 25000, 150000]
  ]

  useEffect(() => {
    const token = localStorage.getItem("auth_token")
    setIsAuthenticated(!!token)

    if (!token) {
      setLoading(false)
      return
    }

    const fetchData = async () => {
      try {
        setLoading(true)
        const data = await fetchLiveFancyBets("match_id") // Replace with actual match ID
        setFancyBets(data.fancy || [])
      } catch (error) {
        console.error("Error fetching fancy bets:", error)
        setFancyBets([])
      } finally {
        setLoading(false)
      }
    }

    fetchData()
    const interval = setInterval(fetchData, 5000) // Refresh every 5 seconds
    return () => clearInterval(interval)
  }, [router])

  const handleStakeButton = (type: 'min' | 'max') => {
    setSelectedStake(type === 'min' ? MIN_STAKE.toString() : MAX_STAKE.toString())
  }

  const handleClearStake = () => {
    setSelectedStake("0")
  }

  const handleOddsClick = (bet: FancyBet, type: 'yes' | 'no') => {
    const odds = type === 'yes' ? bet.yes.odds : bet.no.odds;
    setSelectedOdds(odds);
    setSelectedBet({
      name: bet.name,
      type,
      odds
    });
  };

  const renderLoginPrompt = () => (
    <div className="bg-brand-darkPurple rounded-lg p-6 text-center">
      <h3 className="text-xl text-white font-bold mb-4">Login to Place Bets</h3>
      <p className="text-gray-400 mb-6">Create an account or login to place bets and win big!</p>
      <div className="flex gap-4 justify-center">
        <Button
          onClick={() => router.push('/login')}
          className="bg-brand-gold hover:bg-yellow-500 text-black font-bold"
        >
          Login
        </Button>
        <Button
          onClick={() => router.push('/register')}
          className="bg-brand-green hover:bg-green-600 text-white font-bold"
        >
          Register
        </Button>
      </div>
    </div>
  )

  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-b from-gray-900 to-black">
      {/* Match Header */}
      <div className="bg-black/50 backdrop-blur-sm p-4 sticky top-0 z-50 border-b border-gray-800">
        <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4">
          <div className="flex items-center gap-4">
            <div className="text-yellow-400 text-xl sm:text-2xl font-bold flex items-center gap-2">
              <span className="animate-pulse">üî¥</span> LIVE
            </div>
            <div className="text-white text-center sm:text-left">
              <h1 className="text-base sm:text-lg font-semibold">NEW ZEALAND T10 VS AUSTRALIA T10</h1>
              <p className="text-xs sm:text-sm text-gray-400">(31/03/2025 01:40:00 AM)</p>
            </div>
          </div>
          <div className="flex items-center gap-4">
            <Button variant="outline" className="bg-transparent border-white text-white hover:bg-white/10">
              <span className="mr-2">üìä</span>
              SCORE
            </Button>
          </div>
        </div>
      </div>

      {/* Match Content */}
      <div className="flex flex-col lg:flex-row flex-1">
        {/* Left Side - Match View */}
        <div className="flex-1 p-4">
          <div className="relative w-full h-[300px] sm:h-[400px] bg-[url('/live_cricket-bg.png')] bg-cover bg-center rounded-lg overflow-hidden shadow-2xl">
            <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-black/20 flex items-center justify-center">
              <div className="w-full max-w-2xl p-4">
                <div className="flex flex-col sm:flex-row justify-between items-center gap-6 sm:gap-8">
                  {/* NZ Side */}
                  <div className="text-white text-center backdrop-blur-sm bg-white/5 p-4 rounded-lg">
                    <div className="text-3xl sm:text-4xl font-bold mb-2">NZ</div>
                    <div className="text-xl sm:text-2xl font-medium">58/1</div>
                    <div className="text-sm text-yellow-400">(5.5 Overs)</div>
                    <div className="text-sm mt-2">CRR: 9.94</div>
                  </div>

                  {/* Center Score */}
                  <div className="bg-black/80 backdrop-blur-sm px-6 py-4 rounded-lg border border-gray-700">
                    <div className="text-white text-center space-y-3">
                      <div className="text-lg sm:text-2xl uppercase text-yellow-400">Last Ball</div>
                      <div className="text-2xl sm:text-4xl font-bold font-mono space-x-2">
                        <span className="text-green-400">4</span>
                        <span className="text-green-400">4</span>
                        <span className="text-green-400">4</span>
                        <span>0</span>
                        <span>1</span>
                      </div>
                      <div className="text-sm sm:text-base space-y-1">
                        <div className="text-yellow-400">*F ALLEN 30 (15)</div>
                        <div>K WILLIAMSON 25 (13)</div>
                      </div>
                    </div>
                  </div>

                  {/* AUS Side */}
                  <div className="text-white text-center backdrop-blur-sm bg-white/5 p-4 rounded-lg">
                    <div className="text-3xl sm:text-4xl font-bold mb-2">AUS</div>
                    <div className="text-xl sm:text-2xl font-medium">0/0</div>
                    <div className="text-sm text-gray-400">(0.0 Overs)</div>
                    <div className="text-sm mt-2">CRR: 0</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Fancy Betting Section - Only show if authenticated */}
          {isAuthenticated ? (
            <div className="mt-6">
              <div className="flex gap-4 mb-4 overflow-x-auto">
                <Button variant="default" className="bg-[#1a1f2d] text-white border border-gray-600 font-bold whitespace-nowrap">
                  FANCY BETS
                </Button>
                <Button variant="default" className="bg-gradient-to-r from-orange-500 to-pink-500 text-white font-bold whitespace-nowrap">
                  PREMIUM
                  <span className="ml-1 text-xs bg-red-500 px-1 rounded animate-pulse">NEW</span>
                </Button>
              </div>

              <div className="space-y-2">
                {loading ? (
                  <div className="text-center py-4 text-gray-400">Loading fancy bets...</div>
                ) : (
                  fancyBets.map((bet, index) => (
                    <div key={index} className="bg-gradient-to-r from-blue-600 to-blue-700 p-4 rounded-lg">
                      <div className="grid grid-cols-[2fr_1fr_1fr_auto] gap-4 text-white">
                        <div className="flex items-center gap-2">
                          <span className="text-yellow-400">‚≠ê</span>
                          <div className="space-y-1">
                            <div className="font-medium">{bet.name}</div>
                            {bet.slidingText && (
                              <div className="text-xs text-gray-300">{bet.slidingText}</div>
                            )}
                          </div>
                        </div>
                        <div
                          onClick={() => handleOddsClick(bet, 'no')}
                          className={`relative ${bet.no.isSuspended ? 'opacity-50' : ''}`}
                        >
                          <div className="bg-pink-400 p-2 rounded text-center cursor-pointer hover:bg-pink-500">
                            <div className="font-bold">{bet.no.odds}</div>
                            <div className="text-sm">{bet.no.stake}</div>
                          </div>
                          {bet.no.isSuspended && (
                            <div className="absolute inset-0 flex items-center justify-center bg-black/30 rounded">
                              SUSPENDED
                            </div>
                          )}
                        </div>
                        <div
                          onClick={() => handleOddsClick(bet, 'yes')}
                          className={`relative ${bet.yes.isSuspended ? 'opacity-50' : ''}`}
                        >
                          <div className="bg-blue-400 p-2 rounded text-center cursor-pointer hover:bg-blue-500">
                            <div className="font-bold">{bet.yes.odds}</div>
                            <div className="text-sm">{bet.yes.stake}</div>
                          </div>
                          {bet.yes.isSuspended && (
                            <div className="absolute inset-0 flex items-center justify-center bg-black/30 rounded">
                              SUSPENDED
                            </div>
                          )}
                        </div>
                        <div className="text-sm text-right">
                          <div>Min: ‚Çπ{bet.minBet}</div>
                          <div>Max: ‚Çπ{bet.maxBet}</div>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          ) : (
            <div className="mt-6">
              {renderLoginPrompt()}
            </div>
          )}
        </div>

        {/* Right Side - Betting Panel - Only show if authenticated */}
        {isAuthenticated && (
          <div className="w-full lg:w-[400px] p-4">
            <div className="sticky top-24">
              <div className="bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 rounded-lg p-4 shadow-xl border border-gray-700">
                {/* Betting Panel Header */}
                <div className="flex justify-between items-center mb-4">
                  <div className="text-white">
                    <div className="font-bold text-lg">NEW ZEALAND T10 VS AUSTRALIA T10</div>
                    <div className="text-gray-300">
                      {selectedBet ? (
                        <span>
                          {selectedBet.name} - {selectedBet.type.toUpperCase()}
                        </span>
                      ) : (
                        "Select a bet"
                      )}
                    </div>
                  </div>
                </div>

                {/* Odds and Stakes Inputs */}
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <div className="text-sm text-gray-300 mb-1">Odds</div>
                    <Input
                      type="number"
                      value={selectedOdds}
                      onChange={(e) => setSelectedOdds(e.target.value)}
                      className="w-full bg-gray-700 text-white border-gray-600 focus:border-brand-gold"
                    />
                  </div>
                  <div>
                    <div className="text-sm text-gray-300 mb-1">Stakes</div>
                    <Input
                      type="number"
                      value={selectedStake}
                      onChange={(e) => setSelectedStake(e.target.value)}
                      className="w-full bg-gray-700 text-white border-gray-600 focus:border-brand-gold"
                    />
                  </div>
                </div>

                {/* Predefined Stakes Grid */}
                <div className="grid grid-cols-4 gap-2 mb-4">
                  {predefinedStakes[0].map((stake, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedStake(stake.toString())}
                      className="bg-gray-700 hover:bg-gray-600 text-white p-2 text-center text-sm rounded transition-colors"
                    >
                      {stake}
                    </button>
                  ))}
                </div>
                <div className="grid grid-cols-4 gap-2 mb-4">
                  {predefinedStakes[1].map((stake, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedStake(stake.toString())}
                      className="bg-gray-700 hover:bg-gray-600 text-white p-2 text-center text-sm rounded transition-colors"
                    >
                      {stake}
                    </button>
                  ))}
                </div>

                {/* Control Buttons */}
                <div className="grid grid-cols-3 gap-2 mb-4">
                  <Button
                    variant="default"
                    className="bg-brand-gold hover:bg-yellow-500 text-black font-bold"
                    onClick={() => handleStakeButton('min')}
                  >
                    MIN
                  </Button>
                  <Button
                    variant="default"
                    className="bg-blue-500 hover:bg-blue-600 text-white font-bold"
                    onClick={() => handleStakeButton('max')}
                  >
                    MAX
                  </Button>
                  <Button
                    variant="default"
                    className="bg-red-500 hover:bg-red-600 text-white font-bold"
                    onClick={handleClearStake}
                  >
                    CLEAR
                  </Button>
                </div>

                {/* Action Buttons */}
                <div className="flex justify-between gap-2">
                  <Button variant="default" className="bg-gray-600 hover:bg-gray-700 text-white flex-1 font-bold">
                    Cancel
                  </Button>
                  <Button variant="default" className="bg-brand-green hover:bg-green-600 text-white flex-1 font-bold">
                    Place Bet
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
